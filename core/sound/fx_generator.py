"""
üéõÔ∏è FX Generator - Module de g√©n√©ration d'effets audio
====================================================

Module d√©di√© √† la g√©n√©ration des variantes d'effets en arri√®re-plan.
Interface simple : fx.create(source_path, effect, force_remake=False)
"""

import threading
import time
import logging
from pathlib import Path
from queue import Queue, PriorityQueue
from typing import Dict, Optional, List
from dataclasses import dataclass
from enum import IntEnum
import numpy as np
from scipy.signal import butter, filtfilt

class Priority(IntEnum):
    """Priorit√©s des t√¢ches de g√©n√©ration"""
    LOW = 3      # G√©n√©ration proactive
    NORMAL = 2   # Demande utilisateur
    HIGH = 1     # R√©g√©n√©ration forc√©e
    URGENT = 0   # Erreur de lecture, fallback imm√©diat

@dataclass
class GenerationJob:
    """T√¢che de g√©n√©ration d'effet"""
    priority: Priority
    source_path: str           # Chemin du fichier brut.wav
    target_path: str           # Chemin du fichier effet.wav
    effect_type: str           # "ship", "city", "helmet"
    force_remake: bool = False # True = r√©g√©n√©rer m√™me si existe
    timestamp: float = 0.0     # Pour tri temporel
    
    def __post_init__(self):
        if self.timestamp == 0.0:
            self.timestamp = time.time()
    
    def __lt__(self, other):
        # Priorit√© puis timestamp (FIFO pour m√™me priorit√©)
        if self.priority != other.priority:
            return self.priority < other.priority
        return self.timestamp < other.timestamp

class FXGenerator:
    """G√©n√©rateur d'effets audio en arri√®re-plan"""
    
    def __init__(self, max_workers: int = 1):
        self.max_workers = max_workers
        self.generation_queue = PriorityQueue()
        self.active_jobs = set()  # √âviter les doublons
        self.workers = []
        self.running = False
        self.stats = {
            "generated": 0,
            "errors": 0,
            "skipped": 0,
            "queue_peak": 0
        }
        
        # Configuration des effets
        self.AVAILABLE_EFFECTS = ["ship", "city", "helmet"]
        self.effects_processor = None  # Lazy loading
        
        self._start_workers()
    
    # =========================================================================
    # üéØ API PUBLIQUE
    # =========================================================================
    
    def create_async(self, source_path: str, effect: str, force_remake: bool = False, priority: Priority = Priority.NORMAL) -> bool:
        """
        Programme la g√©n√©ration d'un effet (asynchrone)
        
        Args:
            source_path: Chemin du fichier brut.wav
            effect: Type d'effet ("ship", "city", "helmet")
            force_remake: True = r√©g√©n√©rer m√™me si existe
            priority: Priorit√© de la t√¢che
            
        Returns:
            True si ajout√© √† la queue, False si erreur
        """
        
        # Validation
        if not self._validate_inputs(source_path, effect):
            return False
        
        target_path = self._get_target_path(source_path, effect)
        
        # V√©rifier si d√©j√† existe (sauf si force_remake)
        if not force_remake and Path(target_path).exists():
            logging.debug(f"‚úÖ Effet d√©j√† existant: {effect} -> {Path(target_path).name}")
            return True
        
        # √âviter les doublons dans la queue
        job_key = f"{source_path}:{effect}"
        if job_key in self.active_jobs and not force_remake:
            logging.debug(f"‚è∏Ô∏è Job d√©j√† en queue: {job_key}")
            return True
        
        # Cr√©er et ajouter le job
        job = GenerationJob(
            priority=priority,
            source_path=source_path,
            target_path=target_path,
            effect_type=effect,
            force_remake=force_remake
        )
        
        self.active_jobs.add(job_key)
        self.generation_queue.put(job)
        
        # Statistiques
        queue_size = self.generation_queue.qsize()
        if queue_size > self.stats["queue_peak"]:
            self.stats["queue_peak"] = queue_size
        
        print(f"üìã Job programm√©: {effect} pour {Path(source_path).parent.name} (priorit√©: {priority.name})")
        return True
    
    # =========================================================================
    # üîß TRAITEMENT DES JOBS
    # =========================================================================
    
    def _process_job_sync(self, job: GenerationJob) -> bool:
        """Traite un job de mani√®re synchrone"""
        
        try:
            # Initialiser le processeur si n√©cessaire
            if self.effects_processor is None:
                self._init_effects_processor()
            
            # Charger l'audio source
            if not self.effects_processor.load_audio(job.source_path):
                print(f"‚ùå Impossible de charger: {job.source_path}")
                self.stats["errors"] += 1
                return False
            
            # V√©rifier si target existe d√©j√† (sauf force_remake)
            if not job.force_remake and Path(job.target_path).exists():
                print(f"‚è≠Ô∏è Effet d√©j√† existant: {Path(job.target_path).name}")
                self.stats["skipped"] += 1
                return True
            
            # Traitement de l'effet
            start_time = time.time()
            effect_config = self._get_effect_config(job.effect_type)
            
            processed = self.effects_processor._apply_environment_effects(
                self.effects_processor.audio_data.copy(),
                effect_config
            )
            
            # Cr√©er le r√©pertoire cible si n√©cessaire
            Path(job.target_path).parent.mkdir(parents=True, exist_ok=True)
            
            # Sauvegarder le r√©sultat
            import soundfile as sf
            sf.write(job.target_path, processed, self.effects_processor.sample_rate)
            
            processing_time = time.time() - start_time
            self.stats["generated"] += 1
            
            print(f"‚úÖ G√©n√©r√© {job.effect_type}: {Path(job.target_path).name} ({processing_time:.2f}s)")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur g√©n√©ration {job.effect_type}: {e}")
            self.stats["errors"] += 1
            return False
    
    def _process_job_async(self, job: GenerationJob):
        """Traite un job de mani√®re asynchrone (worker thread)"""
        
        job_key = f"{job.source_path}:{job.effect_type}"
        
        try:
            success = self._process_job_sync(job)
            
            if success:
                # Logger seulement si succ√®s
                try:
                    print(f"‚úÖ Effet {job.effect_type} g√©n√©r√©: {Path(job.target_path).name}")
                except:
                    pass  # Ignorer les erreurs de logging
            
        except Exception as e:
            # üîß FIX: Gestion d'erreur plus robuste
            try:
                print(f"‚ùå Erreur g√©n√©ration {job.effect_type}: {type(e).__name__}")
            except:
                pass  # Ignorer les erreurs de logging
                
        finally:
            # Nettoyer le job des actifs dans tous les cas
            try:
                self.active_jobs.discard(job_key)
            except:
                pass  # M√™me si √ßa √©choue, continuer

    def _worker_loop(self):
        """Boucle principale d'un worker"""
        
        while self.running:
            try:
                # Attendre un job (timeout pour permettre l'arr√™t)
                job = self.generation_queue.get(timeout=1.0)
                
                # Traiter le job
                self._process_job_async(job)
                
                # Marquer comme termin√©
                self.generation_queue.task_done()
                
                # Pause pour limiter l'impact CPU
                time.sleep(0.1)  # 100ms entre jobs
                
            except Exception as e:
                # üîß FIX: Gestion plus robuste des erreurs
                error_type = type(e).__name__
                
                if "Empty" in str(e) or error_type == "Empty":
                    # Timeout normal de la queue, continuer silencieusement
                    continue
                else:
                    # Vraie erreur √† logger
                    try:
                        print(f"‚ùå Erreur worker FX ({error_type}): {e}")
                        # Ne pas faire de traceback complet pour √©viter les exceptions en cascade
                    except:
                        # Si m√™me le print √©choue, juste continuer
                        pass
                    
                    # Continuer le worker m√™me en cas d'erreur
                    continue
    
    # =========================================================================
    # üõ†Ô∏è M√âTHODES UTILITAIRES
    # =========================================================================
    
    def _validate_inputs(self, source_path: str, effect: str) -> bool:
        """Valide les param√®tres d'entr√©e"""
        
        if not Path(source_path).exists():
            print(f"‚ö†Ô∏è Fichier source inexistant: {source_path}")
            return False
        
        if effect not in self.AVAILABLE_EFFECTS:
            print(f"‚ö†Ô∏è Effet inconnu: {effect}. Disponibles: {self.AVAILABLE_EFFECTS}")
            return False
        
        return True
    
    def _get_target_path(self, source_path: str, effect: str) -> Path:
        """Calcule le chemin de sortie depuis le chemin source"""
        
        source = Path(source_path)
        
        # ‚úÖ FIX: D√©tecter si source est un fichier skin.wav
        if source.name == "skin.wav":
            # Source = /path/to/action/skin.wav
            # Target = /path/to/action/effect.wav (m√™me dossier)
            target_dir = source.parent
            target_file = target_dir / f"{effect}.wav"
            
            print(f"üé® Source SKIN d√©tect√©e: {source.name} ‚Üí {target_file.name}")
            return target_file
        
        elif source.name == "brut.wav":
            # Source = /path/to/action/brut.wav  
            # Target = /path/to/action/effect.wav (m√™me dossier)
            target_dir = source.parent
            target_file = target_dir / f"{effect}.wav"
            
            print(f"üé§ Source BRUT d√©tect√©e: {source.name} ‚Üí {target_file.name}")
            return target_file
        
        else:
            # Logique existante pour autres cas
            # ...reste du code existant...
            pass
    
    def _get_effect_config(self, effect: str) -> Dict:
        """Retourne la configuration d'effet"""
        
        base_config = {
            "type": effect,
            "intensity": 100,
            "use_ffmpeg": True,
        }
        
        if effect == "ship":
            base_config["ship"] = {
                "echo_gain": 88,
                "echo_delay": 45,
                "compressor": 60,
                "metallic_boost": 30,
                "volume_pre": 50,
                "volume_post": 150,
            }
        elif effect == "city":
            base_config["city"] = {
                "highpass": 300,
                "lowpass": 3000,
                "volume_boost": 8,
                "echo_radio": 0,
            }
        elif effect == "helmet":
            # üîß FIX: Configuration helmet corrig√©e pour √©viter l'erreur FFmpeg
            base_config["helmet"] = {
                "delay": 25,
                "lowpass_cutoff": 2000,
                "highpass": 300,
                "compression": 0.6,        # ‚Üê Entre 0 et 1
                "eq_cut": -6,             # ‚Üê N√©gatif en dB
                "volume_boost": -3        # ‚Üê N√©gatif pour baisse
            }
            base_config["use_ffmpeg"] = False  # ‚Üê TEMPORAIRE: Utiliser numpy pour helmet
        
        return base_config
    
    def _init_effects_processor(self):
        """Initialise le processeur d'effets (lazy loading)"""
        try:
            from test_voice_effects import VoiceEffectsProcessor
            self.effects_processor = VoiceEffectsProcessor()
            print("üîß Processeur d'effets initialis√©")
        except ImportError as e:
            print(f"‚ùå Impossible d'importer VoiceEffectsProcessor: {e}")
            print("üí° Assurez-vous que test_voice_effects.py est accessible")
            raise
    
    def _apply_helmet_numpy(self, audio_data: np.ndarray, sample_rate: int, config: Dict) -> np.ndarray:
        """Applique effet helmet avec numpy (pas FFmpeg)"""
        try:
            print("üåç Environment Numpy: HELMET")
            
            # Param√®tres simplifi√©s
            helmet_config = config.get("helmet", {})
            
            # Filtre passe-bas simple (simulation casque)
            # Lowpass √† 2000Hz pour simulation casque
            lowpass_freq = helmet_config.get("lowpass_cutoff", 2000)
            nyquist = sample_rate / 2
            low_cutoff = min(lowpass_freq / nyquist, 0.95)  # √âviter les erreurs
            
            b, a = butter(4, low_cutoff, btype='low')
            filtered_audio = filtfilt(b, a, audio_data)
            
            # R√©duction volume
            volume_factor = 0.7  # -3dB approximatif
            result = filtered_audio * volume_factor
            
            # √âviter le clipping
            result = np.clip(result, -1.0, 1.0)
            
            print(f"‚úÖ Helmet numpy appliqu√© (lowpass: {lowpass_freq}Hz, volume: {volume_factor})")
            return result
            
        except Exception as e:
            print(f"‚ùå Erreur helmet numpy: {e}")
            return audio_data  # Retourner original en cas d'erreur
    
    def _apply_effect_numpy(self, audio_data: np.ndarray, sample_rate: int, effect: str, config: Dict) -> Optional[np.ndarray]:
        """Applique l'effet avec numpy (fallback)"""
        
        if effect == "ship":
            return self._apply_ship_numpy(audio_data, sample_rate, config)
        elif effect == "city":
            return self._apply_city_numpy(audio_data, sample_rate, config)
        elif effect == "helmet":
            return self._apply_helmet_numpy(audio_data, sample_rate, config)  # ‚Üê NOUVEAU
        else:
            print(f"‚ùå Effet numpy non support√©: {effect}")
            return None
    
    # =========================================================================
    # üìä MONITORING ET CONTR√îLE
    # =========================================================================
    
    def get_status(self) -> Dict:
        """Retourne le statut du g√©n√©rateur"""
        return {
            "running": self.running,
            "workers_count": len(self.workers),
            "queue_size": self.generation_queue.qsize(),
            "active_jobs": len(self.active_jobs),
            "stats": self.stats.copy(),
            "available_effects": self.AVAILABLE_EFFECTS.copy()
        }
    
    def stop(self, timeout: float = 5.0):
        """Arr√™te le g√©n√©rateur proprement"""
        if not self.running:
            return
        
        print("üõë Arr√™t du FX Generator...")
        self.running = False
        
        # Attendre que les workers se terminent
        for worker in self.workers:
            if worker.is_alive():
                worker.join(timeout=timeout/len(self.workers))
        
        # Vider la queue
        while not self.generation_queue.empty():
            try:
                self.generation_queue.get_nowait()
            except:
                break
        
        self.workers.clear()
        self.active_jobs.clear()
        
        print(f"‚úÖ FX Generator arr√™t√©. Stats: {self.stats}")

    def _start_workers(self):
        """D√©marre les workers de g√©n√©ration"""
        if not self.running:
            self.running = True
                
            for i in range(self.max_workers):
                worker = threading.Thread(
                    target=self._worker_loop,
                    daemon=True,
                    name=f"FXGenerator-{i+1}"
                )
                worker.start()
                self.workers.append(worker)
                
            print(f"üîß {self.max_workers} worker(s) FX d√©marr√©(s)")
# =============================================================================
# üéØ INSTANCE GLOBALE
# =============================================================================

# Instance globale du g√©n√©rateur (singleton pattern)
fx_generator = FXGenerator(max_workers=1)

# Ajouter ces m√©thodes dans la section "üèÉ WORKERS ET GESTION THREADS" :



def create_async(source_path: str, effect: str, force_remake: bool = False) -> bool:
    """Interface simplifi√©e pour g√©n√©ration asynchrone"""
    return fx_generator.create_async(source_path, effect, force_remake)

def get_status() -> Dict:
    """Interface simplifi√©e pour le statut"""
    return fx_generator.get_status()

def stop():
    """Interface simplifi√©e pour l'arr√™t"""
    fx_generator.stop()